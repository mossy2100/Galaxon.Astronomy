    public static bool UseHorner = false;


    public static double CalcDeltaTPolynomialUsingHorner(int year, double y)
    {
        double t, u;
        switch (year)
        {
            case < -500:
                u = (y - 1820) / 100;
                return Horner(new double[] {
                    -20,
                    0,
                    32,
                }, u);

            case -500:
                return 17203.7;

            case > -500 and <= 500:
                u = y / 100;
                return Horner(new double[] {
                    10583.6,
                    -1014.41,
                    33.78311,
                    -5.952053,
                    -0.1798452,
                    0.022174192,
                    0.0090316521,
                }, u);

            case > 500 and <= 1600:
                u = (y - 1000) / 100;
                return Horner(new double[] {
                    1574.2,
                    -556.01,
                    71.23472,
                    0.319781,
                    -0.8503463,
                    -0.005050998,
                    0.0083572073,
                }, u);

            case > 1600 and <= 1700:
                t = y - 1600;
                return Horner(new double[] {
                    120,
                    -0.9808,
                    -0.01532,
                    1d / 7129,
                }, t);

            case > 1700 and <= 1800:
                t = y - 1700;
                return Horner(new double[] {
                    8.83,
                    0.1603,
                    -0.0059285,
                    0.00013336,
                    -1d / 1174000,
                }, t);

            case > 1800 and <= 1860:
                t = y - 1800;
                return Horner(new double[] {
                    13.72,
                    -0.332447,
                    0.0068612,
                    0.0041116,
                    -0.00037436,
                    0.0000121272,
                    -0.0000001699,
                    0.000000000875,
                }, t);

            case > 1860 and <= 1900:
                t = y - 1860;
                return Horner(new double[] {
                    7.62,
                    0.5737,
                    -0.251754,
                    0.01680668,
                    -0.0004473624,
                    1d / 233174,
                }, t);

            case > 1900 and <= 1920:
                t = y - 1900;
                return Horner(new double[] {
                    -2.79,
                    1.494119,
                    -0.0598939,
                    0.0061966,
                    -0.000197,
                }, t);

            case > 1920 and <= 1941:
                t = y - 1920;
                return Horner(new double[] {
                    21.20,
                    0.84493,
                    -0.076100,
                    0.0020936,
                }, t);

            case > 1941 and <= 1961:
                t = y - 1950;
                return Horner(new double[] {
                    29.07,
                    0.407,
                    -1d / 233,
                    1d / 2547,
                }, t);

            case > 1961 and <= 1986:
                t = y - 1975;
                return Horner(new double[] {
                    45.45,
                    1.067,
                    -1d / 260,
                    -1d / 718,
                }, t);

            case > 1986 and <= 2005:
                t = y - 2000;
                return Horner(new double[] {
                    63.86,
                    0.3345,
                    -0.060374,
                    0.0017275,
                    0.000651814,
                    0.00002373599,
                }, t);

            case > 2005 and <= 2050:
                t = y - 2000;
                return Horner(new double[] {
                    62.92,
                    0.32217,
                    0.005589,
                }, t);

            case > 2050 and <= 2150:
                u = (y - 1820) / 100;
                return -20 + 32 * u * u - 0.5628 * (2150 - y);

            case > 2150:
                u = (y - 1820) / 100;
                return -20 + 32 * u * u;
        }
    }



    public static void CompareDeltaTCalcMethods()
    {
        Stopwatch stopwatch = new Stopwatch();

        for (int year = -1999; year <= 3000; year++)
        {
            DeltaT.UseHorner = false;
            stopwatch.Reset();
            stopwatch.Start();
            double deltaT1 = DeltaT.CalcDeltaT(year);
            stopwatch.Stop();
            long tPow = stopwatch.ElapsedTicks;

            DeltaT.UseHorner = true;
            stopwatch.Reset();
            stopwatch.Start();
            double deltaT2 = DeltaT.CalcDeltaT(year);
            stopwatch.Stop();
            long tHorner = stopwatch.ElapsedTicks;

            double percentFaster = (double) (tPow - tHorner) / tPow * 100;

            double diff = Math.Abs(deltaT1 - deltaT2);
            if (diff > 1e-9)
            {
                Console.WriteLine($"Error with calc for year {year}. deltaT-Pow={deltaT1}, deltaT-Horner={deltaT2}, diff={diff}");
            }
            else
            {
                Console.WriteLine($"Calc matches for year {year}. Pow method took {tPow} ticks. Horner method took {tHorner} ticks. Horner method was {percentFaster:N2}% faster.");
            }
        }
    }



// Method for converting DeltaT values in the text file into Dictionary entry code.
        string data =
            "1620 1622 1624 1626 1628 1630 1632 1634 1636 1638 1640 1642 1644 1646 1648 1650 1652 1654 1656 1658 1660 1662 1664 1666 1668 1670 1672 1674 1676 1678 1680 1682 1684 1686 1688 1690 1692 1694 1696 1698\n121  112  103  95   88   82   77   72   68   63   60   56   53   51   48   46   44   42   40   38   35   33   31   29   26   24   22   20   18   16   14   12   11   10   9    8    7    7    7    7\n\n1700 1702 1704 1706 1708 1710 1712 1714 1716 1718 1720 1722 1724 1726 1728 1730 1732 1734 1736 1738 1740 1742 1744 1746 1748 1750 1752 1754 1756 1758 1760 1762 1764 1766 1768 1770 1772 1774 1776 1778\n7    7    8    8    9    9    9    9    9    10   10   10   10   10   10   10   10   11   11   11   11   11   12   12   12   12   13   13   13   14   14   14   14   15   15   15   15   15   16   16\n\n1780 1782 1784 1786 1788 1790 1792 1794 1796 1798 1800 1802 1804 1806 1808 1810 1812 1814 1816 1818 1820 1822 1824 1826 1828 1830 1832 1834 1836 1838 1840 1842 1844 1846 1848 1850 1852 1854 1856 1858\n16   16   16   16   16   16   15   15   14   13   13.1 12.5 12.2 12.0 12.0 12.0 12.0 12.0 12.0 11.9 11.6 11.0 10.2 9.2  8.2  7.1  6.2  5.6  5.4  5.3  5.4  5.6  5.9  6.2  6.5  6.8  7.1  7.3  7.5  7.6\n\n1860 1862 1864 1866 1868 1870 1872 1874 1876 1878 1880 1882 1884 1886 1888 1890 1892 1894 1896 1898 1900 1902 1904 1906 1908 1910 1912 1914 1916 1918 1920 1922 1924 1926 1928 1930 1932 1934 1936 1938\n7.7  7.3  6.2  5.2  2.7  1.4  -1.2 -2.8 -3.8 -4.8 -5.5 -5.3 -5.6 -5.7 -5.9 -6.0 -6.3 -6.5 -6.2 -4.7 -2.8 -0.1 2.6  5.3  7.7  10.4 13.3 16.0 18.2 20.2 21.1 22.4 23.5 23.8 24.3 24.0 23.9 23.9 23.7 24.0\n\n1940 1942 1944 1946 1948 1950 1952 1954 1956 1958 1960 1962 1964 1966 1968 1970 1972 1974 1976 1978 1980 1982 1984 1986 1988 1990 1992 1994 1996 1998\n24.3 25.3 26.2 27.3 28.2 29.1 30.0 30.7 31.4 32.2 33.1 34.0 35.0 36.5 38.3 40.2 42.2 44.5 46.5 48.5 50.5 52.2 53.8 54.9 55.8 56.9 58.3 60.0 61.6 63.0\n";
        string[] lines = data.Split("\n");
        int n = 0;
        while (true)
        {
            string years = lines[n];
            int r = years.Length % 5;
            if (r != 0)
            {
                years += XString.Repeat(" ", 5 - r);
            }

            string deltaTValues = lines[n + 1];
            r = deltaTValues.Length % 5;
            if (r != 0)
            {
                deltaTValues += XString.Repeat(" ", 5 - r);
            }

            int i = 0;
            while (true)
            {
                try
                {
                    string year = years[(i * 5)..((i + 1) * 5)].Trim();
                    string deltaT = deltaTValues[(i * 5)..((i + 1) * 5)].Trim();
                    if (!deltaT.Contains('.', StringComparison.InvariantCulture))
                    {
                        deltaT += ".0";
                    }
                    Console.WriteLine($"{{ {year}, {deltaT} }},");
                }
                catch (Exception)
                {
                    break;
                }
                i++;
            }

            n += 3;
            if (n >= lines.Length)
            {
                break;
            }
        }
